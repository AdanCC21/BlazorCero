@page "/carreras/list"
@using Entities.Model;
@using Services;
@inject S_Major majorSer;

<h1>Majors</h1>

<section class="d-flex flex-column mx-auto my-2">
<span class="mx-auto w-25 text-center bg-success-subtle rounded fw-bold">@message</span>
	<h3>Majors List</h3>

	@if(majorList != null)
	{
		<ul>
			@foreach(var current in majorList)
			{
				<li>@current.Name</li>
			}
		</ul>
	}
</section>

<section class="d-flex flex-column w-100 justify-content-between">
	<form class="d-flex flex-column my-2 mr-3 w-25" @onsubmit="insertMajor">
		<h3 class="col-12">Insert Major</h3>

		<label>Name</label>
		<input class="w-50" @bind="formName" placeholder="Ing. Software And Emergency Technologies"/>

		<label>Alias</label>
		<input class="w-50" @bind="formAlias" placeholder="ISyT"/>
		<button class="my-2 w-25">Insert Major</button>
	</form>

	<section class="d-flex flex-row w-50 my-2">
		<form class="d-flex flex-column my-2" @onsubmit="searchMajor">
			<h3>Search Major</h3>

			<label>Id</label>
			<input @bind="formUpId" placeholder="Ing. Software And Emergency Technologies" />
			<button class="my-2">Update Major</button>

		</form>
		@if(majorSearched != null)
		{
			<section class="d-flex flex-column mx-2 p-2 rounded bg-light justify-content-between">
				<h3>@majorSearched.Name</h3>
				<span class="ml-2">Id: @majorSearched.Id</span>
				<span class="ml-2">Alias: @majorSearched.Alias</span>
				<button @onclick="@editar">Edit</button>
			</section>
		}
	</section>
	@if (edit)
	{
		<section class="d-flex flex-column w-50">
			<h1>Update Data</h1>
			<form class="d-flex flex-column my-2 w-50" @onsubmit="updateMajor">
				<label>Name</label>
				<input @bind="tempEdit.Name" placeholder="@majorSearched.Name" />
				<label>Alias</label>
				<input @bind="tempEdit.Alias" placeholder="@majorSearched.Alias" />
				<button>Update</button>
			</form>
		</section>
	}
</section>

@code {
	private string formName = "";
	private string formAlias = "";

	private string formUpId = "";
	private string formUptName = "";
	private string formUptAlias = "";

	private List<E_Major>? majorList;
	private string message = "";

	private E_Major majorSearched = null;

	private bool edit = false;
	protected void editar()
	{
		tempEdit = majorSearched;
		edit = true;
	}
	
	private E_Major tempEdit = new E_Major();

	protected async Task<bool> updateMajor()
	{

		var allRight =  await majorSer.updateMajor(tempEdit);
		if (!allRight)
		{
			message = "We couldn't update the data";
			return false;
		}
		message = "Data updated";
		return true;
	}

	protected async Task<bool> insertMajor()
	{
		E_Major temp = new E_Major(formName, formAlias);
		var allRight = await majorSer.insertMajor(temp);
		if (!allRight)
		{
			message = "We couldn't update the data";
			return false;
		}
		message = "Data updated, please refresh this page";
		return true;
	}

	protected async Task<E_Major> searchMajor()
	{
		var majorFounded = await majorSer.getMajor(Convert.ToInt32(formUpId));
		if (majorFounded == null)
		{
			message = "Major not found";
			return null;
		}
		majorSearched = majorFounded;
		message = "Founded";
		return majorFounded;
	}

	protected override async Task OnInitializedAsync()
	{
		try
		{
			var lista = await majorSer.getAllMajors();
			if(lista != null && lista.Count > 0)
			{
				majorList = lista;
			}
			else
			{
				Console.WriteLine("Lista vacia");
				message = "Lista vacia";
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex);
			message = "Hubo un error al conectar";
		}
	}
}
